#!/bin/bash
# shellcheck disable=SC2016
set -e
# export PATH="/bin:/usr/bin:/usr/local/bin" # safer, if you can

(( BASH_VERSINFO[0] < 4 )) && echo "Bash 4+ required." && exit 1

: "${PAGER:=more}"
: "${EDITOR:=vi}"
: "${HELP_BROWSER:=chromium-browser}"
: "${EXE:="${0##*/}"}"
: "${ZET_DIR:="$HOME/Sync/zettelkasten"}"
: "${TEMPLATE_DIR:="$HOME/Sync/projects/cmd-zw/templates"}"

declare -A HELP
declare -A CONF

declare black="\e[30m"
declare red="\e[31m"
declare green="\e[32m"
declare yellow="\e[33m"
declare blue="\e[34m"
declare magenta="\e[35m"
declare cyan="\e[36m"
declare white="\e[37m"
declare reset="\e[0m"

_initialize() {
  : # put initialization code here
}

_alternatives() {
  # Show help if no command is passed.
  if [[ -z $CMD ]];then
    x.help "$@"
  fi
}

HELP[main]='

# ZettelWarrior

A command-line inteface for Zettelkasten metodology.

These are common ZettelWarrior commands for usual situations:

## Start a zettelkasten

A folder that contains a `.zettelwarrior` file is detected as a Zettelkasten folder.

> `init` : init current path as a Zettelkasten

## Create Zettel

> `add` : add a new zettel
> `in` : add a new zettel with the tag #in

## Management of the Zettelkasten

> `index` : open the main index of the Zettelkasten (./index.md)
> `inbox` : show all the zettels in the inbox (zettels with #in)
> `search` : search zettels in the zettelkasten
> `tags_table` : print a table with tags usage information

## Generation

> `generate-index` : generate an index for the given tag
'

HELP[init]='Init a folder as a Zettelkasten.'

x.init () {
  if [ -f ".zettelwarrior" ]; then
    echo "ERROR: The zettelkasten is already init.";
  else
    touch ".zettelwarrior";
    cat "$TEMPLATE_DIR/index.tpl" > "index.md"
  fi
}

HELP[add]='Add a new zettel to the Zettelkasten.'

x.add() {

  local backlink title_passed

  while getopts 'b:t' flag; do
    case "${flag}" in
      b) backlink="${OPTARG}" ;;
      t) title_passed=true;;
      *) echo "Error: flag not supported."
         exit 1 ;;
    esac
  done

  if [ ! -f ".zettelwarrior" ]; then
    echo "ERROR: .zettelwarrior not found."
    return 1
  fi
  
  export UUID=$(x._new_uuid)

  if [[ "$title_passed" ]]; then
    read title
    export TITLE=$title
  else
    export TITLE=""
  fi

  export FOOTER=""

  if [[ "$backlink" ]]; then
    local backlink_uuid=${backlink%.md}
    local backlink_title=$(x.title "$backlink_uuid")
    export BACKLINK="[$backlink_title]($backlink_uuid)";

    local backlink_tags=$(x.tags "$backlink_uuid")
    export TAGS=""
    for tag in $backlink_tags; do
      TAGS="${TAGS}#${tag} "
    done
  fi

  cat "$TEMPLATE_DIR/zettel.tpl" | envsubst > "$UUID.md"

  echo "[$TITLE]($UUID)"
}

HELP[in]='Create a quick zettel to save an idea in the inbox'

x.in () {

  export UUID=$(x._new_uuid)
  export TITLE=""
  export BACKLINK=""
  export TAGS="#in"

  cat "$TEMPLATE_DIR/zettel.tpl" | envsubst > "$UUID.md"

  $EDITOR "$UUID.md";

}

HELP[_rg_2_fzf]='Search using rg and format the output for fzf.'

x._rg_2_fzf() {
  local search_pattern=$1
  local filenames=$(rg -l "$1")
  local input_for_fzf=""
  local uuid
  local title
  for filename in $filenames 
  do
    uuid=$(basename "$filename" ".md")
    title=$(x.title "$uuid")
    input_for_fzf+=$(echo "$title :: $filename\n")
  done

  echo -e $input_for_fzf
}

HELP[inbox]='Show the zettels in the inbox.'

x.inbox() {
  local search_pattern=$1

  local selection=$(x._rg_2_fzf $search_pattern | fzf \
    --info=inline \
    --ansi \
    --height 100% \
    --preview 'echo {} | grep -oP "\:\: \K(.*)" | xargs rg -i -C 10000 -N --color always {q}' \
    --preview-window=right:50%:wrap \
    --bind up:preview-up,down:preview-down)

  local filename=$(echo $selection | grep -oP "\:\: \K(.*)")

  if [ -n "$filename" ]; then
    $EDITOR $filename
  fi
}

HELP[index]='Open the index of the Zettelkasten.'

x.index () {
  $EDITOR "index.md";
}

HELP[generate-index]='Generate an index for the given tag.'

x.generate-index () {
  local tag="$1";

  local uuid;

  local zettels=$(ls | grep '^[0-9]' | tac);

  for zettel in $zettels; do
    uuid=${zettel%.md};

    for zettel_tag in $(x.tags $uuid); do
      if [ "$zettel_tag" = "$tag" ]; then
        echo "* [$(x.title $uuid)]($uuid)"
      fi
    done

  done

}

HELP[_new_uuid]='Generate a new uuid using the UTC+0 (Coordinated Universal Time).'

x._new_uuid () {
  date -u +%y%m%d-%H%M%S;
}

HELP[_last]='Return uuid of last added Zettel.'

x._last () {
  # TODO:
  echo "TODO"
}

HELP[title]='Return title of a given Zettel.'

x.title() {
  # Save as a local variable the uuid of the zettel.
  local uuid=$1
  # Find the title and return it.
  local result=`grep -oPh -m 1 '# \K(.*)' "$uuid.md"`
  # Check if the title is empty.
  if [ -z "$result" ]; then
    local body=`sed '/^---$/,/^---$/d' $uuid.md | grep -m 1 .` 
    result=$body
  fi
  echo $result
}

HELP[search]='Search in the zettelkasten.'

x.search() {

  rg -l . | xargs grep -oP  -m 1 '# \K(.*)' | fzf \
    --header="enter:open" \
    --info=inline \
    --ansi \
    `# Fullscreen` \
    --height 100% \
    `# Use cat for previewing the selection` \
    --preview 'echo {} | grep -o ".*md" | xargs rg -i -C 10000 -N --color always {q}' \
    `# Display previow on top, fill 65% of the space and wrap long lines.` \
    --preview-window=right:50%:wrap \
    `# Bind up and down arrows for scrolling the preview` \
    --bind up:preview-up,down:preview-down \
    `# Do not perform search.` \
    --phony \
    `# Call ag whenever the query is changed.` \
    --bind "change:reload:rg -li {q} | xargs grep -oPH -m 1 '# \K(.*)'" \
    --bind 'enter:execute-silent: echo {} | grep -o ".*md" | xargs -I % vim %' \
    --bind "ctrl-o:execute-silent@tmux send-keys -t \{left\} Escape :read Space ! Space echo Space && \
            tmux send-keys -t \{left\} -l '\$(zw-vimwikilink.py \"{}\")' && \
            tmux send-keys -t \{left\} Enter@" \

}

HELP[tags]='Return tags of a given Zettel.'

x.tags() {
  # Save as a local variable the uuid of the zettel.
  local uuid=$1;
  # Declare a local varibale to save the raw tags from the zettel.
  local tag_raw;
  # Find the tags in the zettel and save them.
  tag_raw=$(grep -oPh -m 1 'tags: \K(.*)' "$uuid.md");
  # Remove # and ## from the tags.
  echo "${tag_raw//#/}"
}


HELP[tags_table]='Print a table with tags info.'

x.tags_table () {
  echo "Tags table";

  declare -A tags_array;

  local uuid;

  local zettels=$(ls | grep '^[0-9]');

  for zettel in $zettels; do
    uuid=${zettel%.md};

    for tag in $(x.tags $uuid); do
      tags_array[$tag]=$((tags_array[$tag]+1))
    done
  done

  for key in "${!tags_array[@]}"; do 
    echo "$key : ${tags_array[$key]}"; 
  done
}


############################## BOILERPLATE ###########################
## Everything from here to the end of file can be snipped and updated
## with latest from https://github.com/rwxrob/template-bash-command.

# ------------------------------- usage ------------------------------

HELP[usage]='

```
'"$EXE"' usage
```

Display all possible commands. Note that this is usually easier by
simply using tab completion instead.'

x.usage() {
  local -a cmds
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:1} =~ _ ]] && continue
    cmds+=("$c")
  done
  local IFS='|'
  printf "usage: %s (%s)\n" "$EXE" "${cmds[*]}"
}

# ------------------------------- help -------------------------------

HELP[help]='

```
'"$EXE"' help [COMMAND]
```

Displays specific help information. If no argument is passed displays
general help information (main). Otherwise, the documentation for the
specific argument keyword is displayed, which usually corresponds to
a COMMAND name (but not necessarily). All documentation is written in
GitHub Flavored Markdown and will displayed as a web page if `pandoc`
and `$HELP_BROWSER` are detected, otherwise, just the Markdown is sent
to `$PAGER` (default: more).

Also see `readme` and `usage` commands.
'

x.help() { 
  local name="${1:-main}" title body file
  title=$(_help_title "$name") || true
  if [[ -z "$title" ]]; then
    title="$EXE $name"
    [[ $name == main ]] && title="$EXE"
  fi
  if [[ $name == main ]]; then
    body=$(x.readme)
    body=${body#*$title}
  else
    body="${HELP[$name]}"
  fi
  file="/tmp/help-$EXE-$name.html"
  if _have pandoc ; then
    if _have "$HELP_BROWSER" && [[ -t 1 ]] ;then
      pandoc -f gfm -s --metadata title="$title" \
        -o "$file" <<< "$body"
      [[ -z "$2" ]] && cd /tmp && exec "$HELP_BROWSER" "$file"
      return 0
    fi
    pandoc -f gfm -s --metadata title="$title" \
      -t plain <<< "$body" | "$PAGER"
    return 0
  fi
  echo -e "$title\n\n$body" | "$PAGER"
}

_help_title() {
  _filter "$@" && return $?;
  local name="$1"
  while IFS= read -r line; do
    [[ $line =~ ^[:space]*$ ]] && continue
    [[ $line =~ ^#\ (.+) ]] && echo "${BASH_REMATCH[1]}" && return 0
    return 1
  done <<< "${HELP[$name]}"
}

# ------------------------------ readme ------------------------------

HELP[readme]='
## Generate `README.md` File

```
'"$EXE"' readme > README.md
```

The `readme` command will output the embedded help documentation in raw
GitHub Flavored Markdown suitable for use as a `README.md` file on
GitHub or similar hosting service.'

x.readme() {
  _trim "${HELP[main]}"
  echo
  while IFS= read -r name; do
    [[ $name = main ]] && continue
    body=$(_trim "${HELP[$name]}")
    [[ $body =~ ^\# ]] || body="## The \`$name\` Command"$'\n\n'$body
    printf "%s\n\n" "$body"
  done < <(printf "%s\n" "${!HELP[@]}" | LC_COLLATE=C sort)
  echo -e "----\n\n*Autogenerated $(date)*\n"
}

# ------------------------------ config ------------------------------

HELP[config]='

```
'"$EXE"' config
'"$EXE"' config KEY
'"$EXE"' config.set KEY VALUE
'"$EXE"' config.set KEY ""
'"$EXE"' config.keys
'"$EXE"' config.values
'"$EXE"' config.directory
'"$EXE"' config.path [file]
'"$EXE"' config.edit [file]
'"$EXE"' config.delete
'"$EXE"' config.read
'"$EXE"' config.write
'"$EXE"' config.dump
```

The `config` command is for reading, writing, and displaying standard
open desktop configuration properties. 

### Arguments

With no arguments calls `dump` and outputs all the currently cached
configuration settings.

With a single KEY argument fetches the value for that key and outputs
it unless it is one of the following special (reserved) key names:

* `directory` full path to config directory
* `path`   full path to specific config file (default: `values`) 
* `edit`   opens config file in editor (default: `editor` or `$EDITOR)
* `keys`   output the configuration keys, one per line
* `values` output the configuration values, one per line
* `delete` if key argument then delete a specific key, otherwise prompt
* `read` reads the configuration file into CONF associative array
* `write` write the CONF associative array to the configuration file
* `dump` write the flattened CONF associative array to standard output

With more than one argument the remaining arguments after the KEY will
be combined into the VALUE and written to a `values` file in the
configuration directory. 

### Configuration Directory

The configuration directory path relies on the following environment
variables:

* `EXE` - defaults to name of currently running command ('"$EXE"')
* `HOME` - checked for `$HOME/.config/$EXE/values`
* `XDG_CONFIG_HOME` - overrides `$HOME/.config`
* `CONFIG_DIR` - full path to directory containing `values` file

The `CONFIG_DIR` always takes priority over anything else if set, but is
never implied. If the directory does not exist it will be created the
first time a value is set.

### Configuration `values` File Format

The file (which is almost always located at
`~/.config/'"$EXE"'/values`) uses the simplest possible format to
facilitate standard UNIX parsing and filtering with any number of
existing tools (and no `jq` dependency).

* One KEY=VALUE per line
* KEYs may be anything but the equal sign (`=`)
* VALUEs may be anything but line returns must be escaped

Note that, although similar, this is *not* the same as Java properties
and other similar format. It is designed for ultimate simplicity,
efficiency, and portability.'

x.config() {
  case $# in
    0) x.config.dump ;;
    1) x.config.get "$@" ;;
    *) x.config.set "$@" ;;
  esac
}

x.config.edit() {
  : "${CONF[editor]:="${EDITOR:=vi}"}"
  exec "${CONF[editor]}" "$(x.config.path "${1:-values}")"
}

x.config.delete() {
  if [[ -z "$1" ]];then
    select key in "${!CONF[@]}"; do
      x.config.delete "$key"
      return $? 
    done
  fi
  x.config.set "$1" ''
}

x.config.keys() { printf "%s\n" "${!CONF[@]}"; }

x.config.values() { printf "%s\n" "${CONF[@]}"; }

x.config.dir() {
  local dir="$HOME/.config/$EXE"
  [[ -n "$XDG_CONFIG_HOME" ]] && dir="$XDG_CONFIG_HOME/$EXE" 
  [[ -n "$CONFIG_DIR" ]] && dir="$CONFIG_DIR"
  [[ -n "$1" ]] && echo "$dir/$1" && return 0
  printf "%s" "$dir"
  [[ -t 1 ]] && echo
  return 0
}

x.config.path() { 
  local file=${1:-values}
  printf "%s/%s" "$(x.config.dir)" "$file"
  [[ -t 1 ]] && echo
  return 0
}

x.config.set() {
  local key="$1"; shift; local val="$*"
  val="${val//$'\n'/\\n}"
  CONF["$key"]="$val"
  x.config.write
}

x.config.get() { 
  printf "%s" "${CONF[$1]}"
  [[ -t 1 ]] && echo
  return 0
}

x.config.read() {
  local values="$(x.config.path)"
  [[ -r "$values" ]] || return 0
  while IFS= read -r line; do
    [[ $line =~ ^([^=]+)=(.+)$ ]] || continue
    CONF["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
  done < "$values"
}

x.config.write() {
  local dir="$(x.config.dir)"
  mkdir -p "$dir"
  x.config.dump > "$dir/values"
}

x.config.dump() {
  (( ${#CONF[@]} == 0 )) && return 0
  paste -d=\
    <(printf "%s\n" "${!CONF[@]}") \
    <(printf "%s\n" "${CONF[@]}") \
  | sort
}

# ----------------------------- utilities ----------------------------

_jsonstr() {
  _checkdep jq || return $?
  _buffer "$@" && return $?
  jq -MRsc <<< "$1"
}

_urlencode() {
  _buffer "$@" && return $?
  local string="$1"
  local strlen=${#string}
  local encoded=""
  local pos c o
  for ((pos = 0; pos < strlen; pos++)); do
    c=${string:$pos:1}
    case "$c" in
    [-_.~a-zA-Z0-9]) o="$c" ;;
    *) printf -v o '%%%02x' "'$c'" ;;
    esac
    encoded+="$o"
  done
  echo "$encoded"
}

_reduce() {
  local -n name="${1:?"name of array required"}"
  while IFS= read -r key; do
    [[ $key =~ $2 ]] && echo "$key"
  done < <(printf "%s\n" "${name[@]}")
}

_newest() {
  IFS=$'\n'
  mapfile -t f < <(ls -1 --color=never -trd "${1:-.}"/* 2>/dev/null)
  [[ ${#f} > 0 ]] && echo "${f[-1]}"
}

_trim() {
  local it="${1#"${1%%[![:space:]]*}"}"
  echo -e "${it%"${it##*[![:space:]]}"}"
}

_join() { local IFS="$1"; shift; echo "$*"; }

_have(){ type "$1" &>/dev/null; }

_checkdep() {
  _have "$1" && return 0
  echo "'$EXE' depends on '$1' for this, but not found"
  return 1
}

_filter(){
  [[ -n "$1" ]] && return 1
  while IFS= read -ra args; do
    "${FUNCNAME[1]}" "${args[@]}"
  done
}

_buffer() {
  [[ -n "$1" ]] && return 1
  "${FUNCNAME[1]}" "$(</dev/stdin)"
}

_prompt() {
  local key="$1" def="$2" regx="$3" value first=yes
  shift 3
  local text="${*:-Enter value for %s [%s]: }"
  [[ -z "$key" ]] && echo "Missing prompt key" >&2 && return 1
  [[ -z "$regx" ]] && echo "Missing valid regx" >&2 && return 1
  while [[ ! $value =~ $regx ]];do
    printf "$text" "$key" "$def" >&2
    IFS= read -r value
    [[ -z "$value" ]] && value="$def"
    [[ $value =~ ^\ +$ ]] && value=""
    [[ -n "$first" ]] && unset first && continue
    echo "Must match /$regx/" >&2
  done
  _trim "$value"
}

# --------------------- completion and delegation --------------------
#      `complete -C foo foo` > `source <(foo bloated_completion)`

x.config.read
_have _initialize && _initialize "$@"

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

for c in "${COMMANDS[@]}"; do
  if [[ $c == "$EXE" ]]; then
    "x.$EXE" "$@"
    exit $?
  fi
done

if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    declare cmd=$(command -v "x.$c")
    if [[ $c == "$CMD" && -n "$cmd" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi

if _have _alternatives; then
  _alternatives "$@" 
  exit $?
fi

x.usage "$@"
